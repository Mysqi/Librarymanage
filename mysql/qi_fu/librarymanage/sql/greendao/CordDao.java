package com.mysql.qi_fu.librarymanage.sql.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mysql.qi_fu.librarymanage.sql.Cord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CORD".
*/
public class CordDao extends AbstractDao<Cord, Void> {

    public static final String TABLENAME = "CORD";

    /**
     * Properties of entity Cord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserNo = new Property(0, String.class, "userNo", false, "USER_NO");
        public final static Property BookNo = new Property(1, String.class, "bookNo", false, "BOOK_NO");
        public final static Property BookName = new Property(2, String.class, "bookName", false, "BOOK_NAME");
        public final static Property LendTime = new Property(3, Long.class, "lendTime", false, "LEND_TIME");
        public final static Property ReturnTime = new Property(4, Long.class, "returnTime", false, "RETURN_TIME");
    }


    public CordDao(DaoConfig config) {
        super(config);
    }
    
    public CordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CORD\" (" + //
                "\"USER_NO\" TEXT," + // 0: userNo
                "\"BOOK_NO\" TEXT," + // 1: bookNo
                "\"BOOK_NAME\" TEXT," + // 2: bookName
                "\"LEND_TIME\" INTEGER," + // 3: lendTime
                "\"RETURN_TIME\" INTEGER);"); // 4: returnTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cord entity) {
        stmt.clearBindings();
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(1, userNo);
        }
 
        String bookNo = entity.getBookNo();
        if (bookNo != null) {
            stmt.bindString(2, bookNo);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        Long lendTime = entity.getLendTime();
        if (lendTime != null) {
            stmt.bindLong(4, lendTime);
        }
 
        Long returnTime = entity.getReturnTime();
        if (returnTime != null) {
            stmt.bindLong(5, returnTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cord entity) {
        stmt.clearBindings();
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(1, userNo);
        }
 
        String bookNo = entity.getBookNo();
        if (bookNo != null) {
            stmt.bindString(2, bookNo);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        Long lendTime = entity.getLendTime();
        if (lendTime != null) {
            stmt.bindLong(4, lendTime);
        }
 
        Long returnTime = entity.getReturnTime();
        if (returnTime != null) {
            stmt.bindLong(5, returnTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Cord readEntity(Cursor cursor, int offset) {
        Cord entity = new Cord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // lendTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // returnTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cord entity, int offset) {
        entity.setUserNo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLendTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setReturnTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Cord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Cord entity) {
        return null;
    }

    @Override
    public boolean hasKey(Cord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

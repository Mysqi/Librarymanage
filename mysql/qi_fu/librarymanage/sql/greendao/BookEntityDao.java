package com.mysql.qi_fu.librarymanage.sql.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mysql.qi_fu.librarymanage.sql.BookEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_ENTITY".
*/
public class BookEntityDao extends AbstractDao<BookEntity, Void> {

    public static final String TABLENAME = "BOOK_ENTITY";

    /**
     * Properties of entity BookEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookName = new Property(0, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookUrl = new Property(1, String.class, "bookUrl", false, "BOOK_URL");
        public final static Property BookNo = new Property(2, String.class, "bookNo", false, "BOOK_NO");
        public final static Property Writer = new Property(3, String.class, "writer", false, "WRITER");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Number = new Property(7, int.class, "number", false, "NUMBER");
        public final static Property Sendernumber = new Property(8, int.class, "sendernumber", false, "SENDERNUMBER");
    }


    public BookEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BookEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_ENTITY\" (" + //
                "\"BOOK_NAME\" TEXT," + // 0: bookName
                "\"BOOK_URL\" TEXT," + // 1: bookUrl
                "\"BOOK_NO\" TEXT," + // 2: bookNo
                "\"WRITER\" TEXT," + // 3: writer
                "\"TIME\" TEXT," + // 4: time
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"CONTENT\" TEXT," + // 6: content
                "\"NUMBER\" INTEGER NOT NULL ," + // 7: number
                "\"SENDERNUMBER\" INTEGER NOT NULL );"); // 8: sendernumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(1, bookName);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(2, bookUrl);
        }
 
        String bookNo = entity.getBookNo();
        if (bookNo != null) {
            stmt.bindString(3, bookNo);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(4, writer);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getNumber());
        stmt.bindLong(9, entity.getSendernumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(1, bookName);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(2, bookUrl);
        }
 
        String bookNo = entity.getBookNo();
        if (bookNo != null) {
            stmt.bindString(3, bookNo);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(4, writer);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getNumber());
        stmt.bindLong(9, entity.getSendernumber());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookEntity readEntity(Cursor cursor, int offset) {
        BookEntity entity = new BookEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // writer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.getInt(offset + 7), // number
            cursor.getInt(offset + 8) // sendernumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookEntity entity, int offset) {
        entity.setBookName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWriter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNumber(cursor.getInt(offset + 7));
        entity.setSendernumber(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
